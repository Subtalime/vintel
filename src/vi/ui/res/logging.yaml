version: 1
disable_existing_loggers: true

objects:
  queue:
    class: queue.Queue
    maxsize: 5000

formatters:
  mine:
    (): vi.logger.logconfig.MyDateFormatter
    format: '%(asctime)s|%(levelname)s [%(threadName)s(%(thread)d)] (%(filename)s/%(funcName)s/%(lineno)d): %(message)s'
    datefmt: '%d/%m %H:%M:%S.%f'
  window:
    format: '%(asctime)s: %(message)s'
    datefmt: '%H:%M:%S'
  error:
    format: "%(levelname)s <PID %(process)d:%(processName)s> %(name)s.%(funcName)s(): %(message)s"
    datefmt: '$d/%m/%Y %H:%M:%S'
  standard:
    format: "%(asctime)s %(name)s.%(funcName)s(): %(levelname)s | %(message)s"
    datefmt: '%d/%m/%Y %H:%M:%S'

handlers:
  file:
    class: logging.handlers.TimedRotatingFileHandler
    formatter: mine
    when: midnight
    delay: true
    level: DEBUG
    filename: !log_path vintel.log
#    maxBytes: 5242880
    backupCount: 10
    encoding: utf8

  console:
    class: logging.StreamHandler
    level: DEBUG
    formatter: mine
    stream: ext://sys.stdout

  # this works, but let's try and do this inside the code
  # that way, we have a listener which catches everything and we can attach to that
#  queue_listener:
#    class: vi.logger.logqueue.LogQueueHandler
#    handlers:
#      - cfg://handlers.console
#      - cfg://handlers.file


loggers:

  vi:
    level: DEBUG
    handlers:
#      - queue_listener
      - console
      - file
    propagate: false

  vi.MapViewPage:
    level: INFO
    handlers:
#      - queue_listener
      - console
      - file
    propagate: false

  pyswagger.core:
    level: WARN
    handlers:
#      - queue_listener
      - console
      - file
    propagate: false

root:
  level: WARN
  handlers:
    - console
